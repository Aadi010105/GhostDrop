generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  passwordHash     String
  role             String
  activities       Activity[]
  comments         Comment[]
  files            File[]            @relation("UserFiles")
  folders          Folder[]
  keys             Key[]
  refreshTokens    RefreshToken[]
  shares           Share[]
  ownedWorkspaces  Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers WorkspaceMember[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

enum DeletionStatus {
  SUCCESS_SOFT_DELETE
  SUCCESS_HARD_DELETE
  FAILED_S3
  FAILED_DB
}

model File {
  id                   String       @id @default(uuid())
  s3Key                String       @unique
  fileName             String
  mimeType             String
  size                 BigInt
  isEncrypted          Boolean      @default(true)
  encryptedKeyMetadata String?
  expiry               DateTime?
  deletedAt            DateTime?    // Field for soft deletion timestamp
  uploadStatus         String       @default("PENDING")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  ownerId              String
  folderId             String?
  hasAnnotations       Boolean      @default(false)
  previewType          PreviewType?
  thumbnailUrl         String?
  activities           Activity[]
  comments             Comment[]
  folder               Folder?      @relation(fields: [folderId], references: [id])
  owner                User         @relation("UserFiles", fields: [ownerId], references: [id])
  keys                 Key[]        @relation("FileKeys")
  shares               Share[]
  // Optional: add relation from DeletionActivity to File, if desired for back-reference
  deletionActivities   DeletionActivity[]
}

model Folder {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ownerId     String
  workspaceId String?
  parentId    String?
  activities  Activity[]
  files       File[]
  owner       User       @relation(fields: [ownerId], references: [id])
  parent      Folder?    @relation("SubFolders", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Folder[]   @relation("SubFolders")
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  keys        Key[]      @relation("FolderKeys")
  shares      Share[]
}

model Share {
  id             String    @id @default(uuid())
  shareToken     String    @unique
  accessType     String    @default("OTP")
  password       String?
  otp            String?
  expiry         DateTime?
  fileId         String?
  folderId       String?
  creatorId      String
  recipientEmail String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  creator        User      @relation(fields: [creatorId], references: [id])
  file           File?     @relation(fields: [fileId], references: [id])
  folder         Folder?   @relation(fields: [folderId], references: [id])
}

model Activity {
  id          String       @id @default(uuid())
  type        ActivityType
  message     String
  createdAt   DateTime     @default(now())
  userId      String?
  fileId      String?
  folderId    String?
  metadata    Json?
  commentId   String?
  workspaceId String?
  comment     Comment?     @relation(fields: [commentId], references: [id])
  file        File?        @relation(fields: [fileId], references: [id])
  folder      Folder?      @relation(fields: [folderId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])
  workspace   Workspace?   @relation(fields: [workspaceId], references: [id])
}

model Key {
  id              String   @id @default(uuid())
  encryptedAesKey String
  keyType         String   @default("FILE")
  createdAt       DateTime @default(now())
  ownerId         String
  fileId          String?
  folderId        String?
  file            File?    @relation("FileKeys", fields: [fileId], references: [id])
  folder          Folder?  @relation("FolderKeys", fields: [folderId], references: [id])
  owner           User     @relation(fields: [ownerId], references: [id])
}

model DeletionActivity {
  id        String         @id @default(uuid())
  fileId    String
  file      File?          @relation(fields: [fileId], references: [id], onDelete: NoAction) // Optional relation to File
  userId    String?        // Optional: track who uploaded
  s3Key     String
  fileName  String
  deletedAt DateTime       @default(now())
  reason    String?        // e.g., "expired", "hard_delete"
  status    DeletionStatus // Use the new enum for status
  error     String?        // Store error message if deletion failed
}

model Comment {
  id         String     @id @default(uuid())
  content    String
  mentions   String[]   @default([])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  fileId     String
  userId     String
  parentId   String?
  activities Activity[]
  file       File       @relation(fields: [fileId], references: [id])
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]  @relation("CommentReplies")
  user       User       @relation(fields: [userId], references: [id])
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ownerId     String
  activities  Activity[]
  folders     Folder[]
  owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members     WorkspaceMember[]
}

model WorkspaceMember {
  id          String        @id @default(uuid())
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  userId      String
  workspaceId String
  user        User          @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

enum ActivityType {
  FILE_UPLOADED
  FILE_DELETED
  SHARE_CREATED
  COMMENT_ADDED
  WORKSPACE_CREATED
  WORKSPACE_UPDATED
  MEMBER_ADDED
  MEMBER_REMOVED
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum PreviewType {
  IMAGE
  PDF
  VIDEO
  CODE
  TEXT
  OTHER
}
